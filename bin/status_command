#!/bin/env ruby

require "listen"


$modules = [] # Holds instances of all status modules
$barFlag = true # Handles the |-|-| animation on the right

# All status modules should conform to the following protocol
class StatusMod
  # Called once at module load (startup)
  def initialize
  end
  # Called once at module unload (shutdown)
  def cleanup
  end
  # Returns the current string that should be displayed for the module
  def render
    print "EMPTY"
  end
end

PID_FILE = "/tmp/status_command.pid"
pidFile = File.new(PID_FILE, "w")
pidFile.write Process.pid
pidFile.close

def update
  # puts caller
  print $modules
    .map { |m| m.render }
    .join(" | ")
  if $barFlag # Gives a visual indication that we're not frozen
    print " |"
  else
    print " -"
  end
  $barFlag = !$barFlag
  print "\n"
  STDOUT.flush
  
end

def classname(str)
  modname = str[str.index('-')+1..str.length]
  modname = modname[0..modname.index('.')-1]
end

ModDir = File.expand_path("~/.config/status_command/mods-enabled")
def refresh_mods
  $modules.clear()
  Dir.chdir(ModDir)
  mods = Dir.glob('*')
    .select { |f|
      # puts "Checking #{f}"
      not File.directory?(f)
    }
    # Now we sort the list lexographically (based off the /\d+/ portion)
    .sort()
  for mod in mods do
    modname = classname mod
    puts "Loading #{modname}"
    load mod # The module is responsible for adding to $modules
    $modules.append Object.const_get(modname).new
  end
end

def cleanups
  for mod in $modules
    mod.cleanup rescue nil
  end
end


Signal.trap "USR1" do
  Thread.new { update } # Can't do it directly in a handler
end

Signal.trap "TERM" do
  File.delete(PID_FILE) rescue nil
end

# TODO
listener = Listen.to(ModDir) do |modded, added, deleted|
  cleanups
  refresh_mods
end


refresh_mods

# We're further updated by callbacks from various modules (or signals)
update
sleep
cleanups

File.delete(PID_FILE) rescue nil
